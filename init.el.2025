

; ~/.emacs.d/init.el

;; 基本都来自 https://zhuanlan.zhihu.com/p/385214753






;; ⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️
;; 目前 company+yasnippet 和 eglot/treesit 冲突. 搞不定...
;; treesit 中 碰到不同的后缀,就给予不同的 -ts-mode. 还有init中做了一个map 会将 mode转为-ts-mode
;;          所以 treesit中需要将2个地方都注释掉,才可以将cpp文件设置为 c++-mode. (目前还是使用 c++-ts-mode)
;; eglot hook的 是 rust-ts-mode, c++-ts-mode.
;; 所以 treesit中 不特意处理 .rs, 这样 .rs 就是 rust-mode. 不会 触发 eglot.
;;
;; 所以, rust 没有eglot, 只有 company 和 yasnippet
;; C++ 有eglot 和 company+yas, 但是 后面2个不起效, 估计 补全 被 eglot 补全掉了.
;;;; 这个问题网上也没有。  等下次吧。





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 已解决。
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; C++默认缩进2个空格，调不了，估计可能放弃 eglot+treesit。 先试试。
;; ++, AI的试了几次，都不行。 bing一下就可以了。
;; https://emacs.stackexchange.com/questions/77232/c-c-with-tree-sitter-how-to-change-indent
;; 这里的 `c-ts-mode-indent-offset 4`  这个属性。

;; 在 Emacs 中，c-ts-mode 是用于 C 语言家族（如 C、C++、Java 等）的模式，基于 Tree-sitter 进行语法解析。对于缩进控制，通常会使用 c-basic-offset 来设置基本缩进量。然而，关于 c-ts-mode-indent-offset，并没有直接这样一个变量存在于 Emacs 的标准配置中。
;; 不知道其他AI知不知道这个东西。 我直接发的 `emacs c-ts-mode-indent-offset`

;; https://emacs-china.org/t/tree-sitter/25353  也是一样的 缩进一直是2个空格，有人回答了 c-ts-mode-indent-offset
;; https://github.com/emacs-mirror/emacs/blob/master/lisp/progmodes/c-ts-mode.el   源码。
   ;; 这个源码里 搜 c-basic-offset。 说了，不会影响这个mode。。 wtf。你怎么不早说。++
;; https://casouri.github.io/note/2023/tree-sitter-starter-guide/index.html  搜 x-mode-indent-offset
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; yasnippet 如果没有模板,那么可能是 yasnippet-snippets没有加载
;; 导致去 默认的 .emacs.d/snippets 中找了.  elpa/yasnippet-snippets 中有一个 snippets,里面有很多模板





















;; `M+x` 然后:
;; describe-mode
;; eval-buffer







;; todo  这里是 to do
; 注释`c+x '` 是真的奇怪, 怎么判断 需要注释哪些行的？  要先鼠标选择好 哪几行，不然 不知道 会注释到哪里。
; undo 改成 C-z
; lsp(应该是这货吧) 疯狂乱跳， 就是 静态校验的框。
;     这个的版本怎么设置， 目前肯定不是 C++20的， 它不认识 map.contains
;     跳出来以后，会导致 文本框的行数不对，所以 前面的 序号宽度会变化，导致 整个输入框 发生偏移。
;       普通输入的时候也有， 就是 序号 20 是2个char，所以宽度少， 如果变成100,那么3个char了，会挤 文本
; C-s 保存文件！
; if () 回车后 的 { 缩进不对。
; std: 会向前跳一个tab， 再输入一个 : 后 会跳回来。  可能把 std: 当作 goto 的flag 了，所以往前跳
; cppcheck 有时占满 100% CPU
;
; cppcheck 崩溃了2次。
;
; 滚动多屏后，光标也会移动。
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;



;;;;
; 2024-5-16: 45 packages loaded in 1.425607 seconds
;
; 2025-3-4: 48 packages loaded in 0.496626 seconds
;    ;; 应该是 early-init的作用。 额外关闭了 菜单栏，工具栏，设置了触发GC的内存上限
; 2025-3-4: 49 packages loaded in 0.532356 seconds
;
;
;
;
;
;
;
;
;
;
;




;(setq confirm-kill-emacs #'yes-or-no-p)      ; 在关闭 Emacs 前询问是否确认关闭，防止误触    。。这个应该默认开启的， 因为 我关闭的时候 emacs 需要我 挨个确认。。
(electric-pair-mode t)                       ; 自动补全括号   。。<> 它不会自动不全， {},() 可以。 因为 < 可以是小于号
(add-hook 'prog-mode-hook #'show-paren-mode) ; 编程模式下，光标在括号上时高亮另一个括号     。。不清楚，反正 我在 TUTORIAL.cn 中， 可以 高亮 另一个 (大/圆) 括号 。 不太一样， 目前是 在 {, (, 《 上时，可以高亮 另一半,没有匹配的话 闪紫色 。 },),》 不行。  <，> 都不行。   我不知道 编程模式下 会怎么样
;(column-number-mode t)                       ; 在 Mode line 上显示列号   。。就是  下面的  只有一行的 小灰条 中 会有 (行，列) ，不知道默认有没有。 所以 先关闭了，看下默认有没有，没有我再 开启 。 关闭状态下,只有行(L22)，没有列 . 可以用了，暂时不需要开启。  列。应该不太需要吧。
(global-auto-revert-mode t)                  ; 当另一程序修改了文件时，让 Emacs 及时刷新 Buffer
(delete-selection-mode t)                    ; 选中文本后输入文本会替换文本（更符合我们习惯了的其它编辑器的逻辑）     。。可以，我也觉得挺好的。
;(setq inhibit-startup-message t)             ; 关闭启动 Emacs 时的欢迎界面     。。这个还是开着吧， 如果装上 dashboard，这里 关闭掉， 会显示 dashboard吗？
(setq make-backup-files nil)                 ; 关闭文件自动备份     。。不过我本来就没有看到 带~ 后缀 的文件，不知道是不是默认关闭的。  。。需要手动关闭的， 看到 ~ 了，  但是不知道 #文件名# 是怎么来的。。 #xx# 是自动保存。  默认情况下，Emacs 每 300 秒（5 分钟）自动保存一次缓存。 。 就这样吧。 5分钟 也不频繁。 要是 真掉了数据，估计要爆炸。
(setq auto-save-default nil)  ; 关闭自动保存。
(add-hook 'prog-mode-hook #'hs-minor-mode)   ; 编程模式下，可以折叠代码块
(global-display-line-numbers-mode 1)         ; 在 Window 显示行号 。。这个行号是：当前的行数，然后上下2侧 从1开始的哪个？ 有点怪。 但是 TUTORIAL.cn 没有。  应该不是， 2侧从1开始，是下面的 相对行号，那个关了， 是不是 相对行号 把 这里的行号 遮蔽了？  是的，至少 相对行号 可以遮蔽 行号。  我试下 关闭，还会有 行号吗？ 关闭就没了。  可以看 `C-x C-b` 找到 scratch，里面会有行号的。 关闭后，里面没有行号。
;(tool-bar-mode -1)                           ; （熟练后可选）关闭 Tool bar
;(when (display-graphic-p) (toggle-scroll-bar -1)) ; 图形界面时关闭滚动条

;(savehist-mode 1)                            ; （可选）打开 Buffer 历史记录保存  。。这个不知道 在哪里看。  可选。。就关了。
;(setq display-line-numbers-type 'relative)   ; （可选）显示相对行号    。。关了，影响 行号的。
;(add-to-list 'default-frame-alist '(width . 90))  ; （可选）设定启动图形界面时的初始 Frame 宽度（字符数）       。。 这个要的， 之前 每次 开启 都是  豆腐块大小，还得 手动拉伸。。。
;(add-to-list 'default-frame-alist '(height . 60)) ; （可选）设定启动图形界面时的初始 Frame 高度（字符数）       。。。 但是这个值，不太理解， 我修改了 没效果啊。。始终都是 那个大小 (当然 比 豆腐块大很多，可以不拉伸frame大小 就可以用。 )

(setq initial-frame-alist '((top . 0) (left . 900) (width . 90) (height . 50)))
(setq-default cursor-type 'bar)
;setq 用于设置当前 Emacs 会话中的变量值，而 setq-default 用于设置 Emacs 默认值。
; setq 当前buffer有效， setq-default 全局。
;  所以 上面的 initial-frame-alist  init.el 结束后 就没有了 ？ 而 cursor-type 可以 一直存活(所以影响了 emacs？)？  不清楚 init.el 和 emacs 是同一个buffer 吗？ 应该不是吧。

;(set-fontset-font "fontset-default" 'cnfonts (font-spec :family "Consolas" :size 16))  ; cnfonts 无效

;(set-default-font "consolas-16")  ;set-default-font is void

(set-face-attribute 'default nil :height 120) ; 可以  字体大小调整后， 上面的 height，width 也需要调整，因为它们是 字符数。
;(set-face-attribute 'highlight nil :distant-foreground 'unspecified)q


;(global-set-key (kbd "M-w") 'kill-region)              ; 交换 M-w 和 C-w，M-w 为剪切
;(global-set-key (kbd "C-w") 'kill-ring-save)           ; 交换 M-w 和 C-w，C-w 为复制
;(global-set-key (kbd "C-a") 'back-to-indentation)      ; 交换 C-a 和 M-m，C-a 为到缩进后的行首
;(global-set-key (kbd "M-m") 'move-beginning-of-line)   ; 交换 C-a 和 M-m，M-m 为到真正的行首  。。我暂时不需要 切换。
(global-set-key (kbd "C-c '") 'comment-or-uncomment-region) ; 为选中的代码加注释/去注释   。。这个挺奇怪的。 百度了下，默认是 m-; 但是这个功能 只能 在 后面 开启注释，不能注释 整行，所以 开启试下。


;; 自定义两个函数
;; Faster move cursor
(defun next-ten-lines()
  "Move cursor to next 10 lines."
  (interactive)
  (next-line 10))

(defun previous-ten-lines()
  "Move cursor to previous 10 lines."
  (interactive)
  (previous-line 10))
;; 绑定到快捷键
(global-set-key (kbd "M-n") 'next-ten-lines)            ; 光标向下移动 10 行
(global-set-key (kbd "M-p") 'previous-ten-lines)        ; 光标向上移动 10 行        。。可能用的到吧。


(pixel-scroll-precision-mode t)

(global-set-key (kbd "M-/") 'hippie-expand)   ;; 不太清楚功能
















;;;; 上面内置的，下面 加载第三方包





;(require 'package)     ; 。。这行必须吗？ 我看清华的只有下面3行，先关闭试下。 估计要的。 不需要，直接 `M-x package-install` ，可以看到 一些 连接的日志，反正 看到了 清华的 网址。  估计默认加载这个package了。

;;;;;; https://mirrors.tuna.tsinghua.edu.cn/help/elpa/
(setq package-archives '(("gnu"    . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                         ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
                         ("melpa"  . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
(package-initialize) ;; You might already have this line

; 插件会被安装到 ~/.emacs.d/elpa/ 目录下 , 确实， 我 看了下，有这个 elpa, 并且是 刚刚建立的， 估计就是 上面 package-install 所以 创建了这个目录，  我没有安装插件， C-g 退出了。


; 我是 29.3 已经自带 use-package 了。






;;;;  package-install 不能迁移，所以 使用配置的方式， 但是 我看其他人的配置，里面 没有 use-package， 我找不到 他们是如何声明 插件的。  难道 init-xxx.el 会自动下载？


; emacs中命令的补全。 估计就是 `C-x` 后 下面会跳出来的框。可能不是。框可能是 counsel的。
(use-package ivy
  :ensure t)

; 基于 ivy 的插件。 估计 `C-x` 的框是 这个插件的。 不是， C-x 的框是 which-key的， 这个应该是 M-x 后的 命令的补全，不是 快捷键的补全。
; 还有 `M-x` (就是 alt+x) 来执行emacs命令。
(use-package counsel
  :ensure t)

; ... 这个也是 `M-x` 。。那么我的 M-x 到底是 哪个插件。。 好像是这个插件提供的。。。
; 先删了，看看 M-x 是什么。
;(use-package amx
;  :ensure t
;  :init (amx-mode))

; 简化 多个窗口之间切换。  它会给每个窗口一个 小的标签符号，只要按下对应的标签即可
; 就是 emacs，多窗口下 `C-x o` 切到下一个窗口。 有这个插件后，`C-x o` 后，你会发现每个窗口的 右上角 会多一个 数字， 你按那个数字，就会切换到 对应的窗口，  而不是默认的那种 下一个窗口。
(use-package ace-window
  :ensure t
  :bind (("C-x o" . 'ace-window)))


; 行头， 代码行头(忽略前面的空格) 之间切换
; 行尾， 代码行尾(忽略后面的注释) 之间的切换。
(use-package mwim
  :ensure t)
(global-set-key (kbd "C-a") 'mwim-beginning)
(global-set-key (kbd "C-e") 'mwim-end)



; 记录撤销 重做。 可以树形结构，而不是线性结构。
; `M-x undo-tree-visualize` 打开树形结构， 方向键控制。
; 但是 需求不大。 我都很少撤销，都是 删除， 因为不知道 撤销 会撤销到 哪里。 而且emacs有撤销，只是不是 树形的。
;; (use-package undo-tree
;;   :ensure t
;;   :init (global-undo-tree-mode)
;;   :custom
;;   (undo-tree-auto-save-history nil))


; ....这个才是 `C-x` 后跳出的 框。。。
; 所以 ivy 只是 命令的 补全。 不是 快捷键的补全。。
(use-package which-key
  :ensure t
  :init (which-key-mode))   ; 6


; 光标快速移动，`C-'` 后你输入 1个字符，然后 它会显示一些字符，输入这些字符 就可以跳转。
; AI是 输入命令 `avy-goto-char` or `avy-goto-char-2` . 我这里是 快捷键绑定了 avy-goto-char-timer。 不知道有什么区别， timer， 我也没看到 它超时啊。  不过感觉 -2 是不是更好一点。 看以后情况吧，代码的话，1个字符，2个字符 实际上 差不多的 定位， 因为单词都差不多。
(use-package avy
  :ensure t
  :bind
  (("C-'" . avy-goto-char-timer)))  ; 感觉有 swiper 的情况下， 这个 意义不太大。



;;; Enable rich annotations using the Marginalia package
;(use-package marginalia
;  ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
;  ;; available in the *Completions* buffer, add it to the
;  ;; `completion-list-mode-map'.
;  :bind (:map minibuffer-local-map
;         ("M-A" . marginalia-cycle))
;
;  ;; The :init section is always executed.
;  :init
;
;  ;; Marginalia must be activated in the :init section of use-package such that
;  ;; the mode gets enabled right away. Note that this forces loading the
;  ;; package.
;  (marginalia-mode))           ; 启动会报错： Symbol’s function definition is void: marginalia-mode




; hydra 暂时不太需要。  将 命令 组合在一起。




; 下面的多光标， 通过 C-g 退出
; C-S-鼠标左键点击，可以多个光标，但是有时点击有，有时点击没有。。不知道为什么。。 可以点很多次。
; 鼠标选中多行, 然后 2次 C-S-c， 在行首出现多光标。
(use-package multiple-cursors
  :ensure t
  :bind
  ("C-S-<mouse-1>" . mc/toggle-cursor-on-click))
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)



;; use-package with package.el:
; 看github上可以直接启用，不走 use-package， 但是不知道 到底有没有内置， 就这样吧。
(setq dashboard-items '((recents   . 10)
                        (bookmarks . 5)
                        (projects  . 5)
                        (agenda    . 5)
                        (registers . 5)))   ; 这个放前面 还是后面 还是 无所谓
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
; 可以自定义 展示多少个 recent, bookmark,project, agenda, registers， 看 github
; https://github.com/emacs-dashboard/emacs-dashboard



;(use-package highlight-symbol        ; 需要 package cl,  不装了。
;  :ensure t
;  :init (highlight-symbol-mode)
;  :bind ("<f3>" . highlight-symbol)) ;; 按下 F3 键就可高亮当前符号


; 大小中 括号的 着色匹配
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))



; 语法检查，错误提示。  这样配置就可以？  那和 lsp  eglot 有什么区别
; AI： flycheck提供 实时语法功能， 在你编码时 即时反馈 错误，警告 和其他潜在问题。
;     lsp 不仅语法检查，还 代码导航（ 跳转到定义，查找引用），代码补全，格式化，重构 等功能
;    flycheck 依赖 外部的 linter 和compiler
;   lsp 是通过 与特定语言的服务器通信 来提供服务  。。。这个还要服务器。。那 代码都得传过去啊。
(use-package flycheck
  :ensure t
;  :config
;  (setq truncate-lines nil) ; 如果单行信息很长会自动换行     。。。这个会 自动 加 换行符。。很不适应。
  :hook
  (prog-mode . flycheck-mode))

; https://www.flycheck.org/en/latest/languages.html#syntax-checker-c-c-gcc   具体语言没有配置，不知道怎么配。。




; https://emacs-lsp.github.io/lsp-mode/
; 不理解。



; https://emacs-lsp.github.io/dap-mode/
; https://emacs-lsp.github.io/dap-mode/page/configuration/
; 没有 cpp 啊。


; 项目管理 和导航， 使 项目中 查找文件，执行命令 和 管理缓冲区 更 简单高效。
; 快速文件导航 `C-c p f` 在某个项目中查找并打开文件 , `C-c p d` 在项目的根目录 打开 Dired 模式，方便浏览整个项目结构
; `C-c p b` `C-c p k`  在 项目的所有打开的缓冲区之间切换， 关闭项目中的 所有未修改的 缓冲区
; `C-c p s g` `C-c p s s`, 项目中搜索文本，支持 grep
(use-package projectile
  :ensure t
  :bind (("C-c p" . projectile-command-map))
  :config
;  (setq projectile-mode-line "Projectile") ; emacs提示 assign to free variable, 不知道什么原因，而且 后面的 值也挺怪的，怎么是个 string。 之前的配置 都是 '开头的。 干脆删了
  (setq projectile-track-known-projects-automatically nil))


; 结合 projectile 和 ivy， 为 项目管理和导航 提供 补全。
(use-package counsel-projectile
  :ensure t
  :after (projectile)
  :init (counsel-projectile-mode))




; ((c++-mode . ((flycheck-clang-language-standard . "c++11"))))



; `C-x g`, git的GUI，但是不知道怎么用，而且我直接命令行git的，所以不用。
;(use-package magit
;  :ensure t)




; 准备用 eglot 所以删除了。 而且 每次打开C++都会 下面弹框，要安装lsp server，但是点击了，有时会卡死，可能是网络的问题？
;(use-package c++-mode
;  :functions 			; suppress warnings
;  c-toggle-hungry-state
;  :hook
;  (c-mode . lsp-deferred)
;  (c++-mode . lsp-deferred)
;  ;(c++-mode . c-toggle-hungry-state)
;  )







; 可以了 ; package-list-packages   会更新包信息。

; 版本不对， 服务器上是 20240 5 15 ， 不是 0 4 15 ， 不知道 启动时的 0415 哪里来的， 可能要过段时间 就会好吧。
;Failed to install rust-mode: http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/rust-mode-20240415.936.tar: Not found

; 删除了，用 eglot
; ...不知道 eglot 和 rust-mode 是否重叠。。 rust-mode提供了 语法高亮，缩进 等。
;; (use-package rust-mode
;;   :ensure t
;;   :functions dap-register-debug-template
;;   :bind
;;   ("C-c C-c" . rust-run)
;;   :hook
;;   (rust-mode . lsp-deferred)
;;   :config
;;   ;; debug
;; ;  (require 'dap-gdb-lldb)    ;; 没有装 dap-lldb，所以不能用，  调试的。
;; ;  (dap-register-debug-template "Rust::LLDB Run Configuration"
;; ;                               (list :type "lldb"
;; ;				     :request "launch"
;; ;			             :name "rust-lldb::Run"
;; ;				     :gdbpath "rust-lldb"
;; ;				     :target nil
;; ;				     :cwd nil))
;;              )

; emacs运行 各种 cargo命令，如 构建项目，运行测试等。
;; (use-package cargo
;;   :ensure t
;;   :hook
;;   (rust-mode . cargo-minor-mode))






; 侧边栏文件树视图。 ..没用过。 保留吧，
(use-package treemacs
  :ensure t
  :defer t
  :config
  (treemacs-tag-follow-mode)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ;; ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map
	("/" . treemacs-advanced-helpful-hydra)))

(use-package treemacs-projectile
  :ensure t
  :after (treemacs projectile))

; .. lsp 没有啊
;(use-package lsp-treemacs
;  :ensure t
;  :after (treemacs lsp))





;;;;;;;;;;;;;;;;;;;;


; 自动补全
(use-package company
  :ensure t
  :init (global-company-mode)
  :config
  (setq company-minimum-prefix-length 2) ; 只需敲 1 个字母就开始进行自动补全
  (setq company-tooltip-align-annotations t)
  (setq company-idle-delay 0.3)
;  (setq company-show-numbers t) ;; 给选项编号 (按快捷键 M-1、M-2 等等来进行选择).
  (setq company-show-quick-access t)   ;; 上面的命令，emacs提示 过时(obsolete)了，要用这个。
  (setq company-selection-wrap-around t)
  (setq company-transformers '(company-sort-by-occurrence))) ; 根据选择的频率进行排序，读者如果不喜欢可以去掉



; 使用图形界面，可以再安装一个 company-box 用以显示图标：
;(use-package company-box
;  :ensure t
;  :if window-system
;  :hook (company-mode . company-box-mode))




;; 文件图标。 还有一个插件：`treemacs-all-the-icons`
(use-package all-the-icons
  :ensure t     ;; 网上没有这行，  导致 启动时： Cannot load all-the-icons  。。。
  ;; :if (display-graphic-p)
  ) ;; 我没有这个变量，所以不会起效




(use-package monokai-theme
  :ensure t
  :config   ;; 不加这行， Failed to parse package monokai-theme: use-package: :ensure wants exactly one argument  应该是 把下面的 也当作 ensure 的参数。
  (load-theme 'monokai t))






; mode-line .




; org-roam

; org-mode



; https://github.com/dholm/benchmark-init-el
; 获得 启动时 的 各个包的 消耗的时间。



;; `C-;` 光标所在单词 会高亮， 所有相同的 都会被 修改。
(use-package iedit
  :ensure t
  :bind ("C-;" . iedit-mode))


;; 这个可以 只格式化 选中的区域吗？
;; 还依赖了外部的格式化工具。CC++需要 clang-format
(use-package format-all
  :ensure t
  ;; enable format on save with format-all-mode
  ;; :hook ((prog-mode . format-all-mode)
  ;; 	   (format-all-mode . format-all-ensure-formatter))
  ;; and bind a shortcut to manual format
  :bind ("C-c f" . format-all-region-or-buffer)   ;; 这里能直接绑定 下面的方法吗？ 感觉不行。
  ;;:bind ("C-c f" . format-region-with-foramt-all)  ;;  不行。
  )

;; 抄AI的 为了 区域格式化   .... 被耍了。。这个不行的。 之前估计是 上面的没有注释掉，所以 C-c f可以。。
;; 而且 上面的 就支持 region
;; (defun format-region-with-format-all ()
;;   "Format the selected region using format-all."
;;   (interactive)
;;   (let ((beg (region-beginning))
;;         (end (region-end)))
;;     ;; Narrow to region
;;     (narrow-to-region beg end)
;;     ;; Format buffer
;;       (format-all-buffer)
;;     ;; Widen back to original state
;;       (widen)))
;; (global-set-key (kbd "C-c c f") 'format-region-with-foramt-all)    ;; 可以。 先鼠标 选中多行，然后 C-c f



;; 将光标所在行，上移，下移，上复制，下复制
;; `C-S-n/p` `C-c d n` `C-c d p`
;; move-dup, move/copy line or region
(use-package move-dup
  :ensure t
    :hook (after-init . global-move-dup-mode))


;; 还有个 protobuf-mode
;; Markdown file support
(use-package markdown-mode
  :ensure t)

;; 还有 quickrun， restclient



;; Language Server (eglot - builtin since v29)
;; 还是需要 LSP的， 比如 C++的 clangd。 rust的 rust-analyzer 。。。没装
;; (use-package eglot
;;   :bind ("C-c e f" . eglot-format)
;;   :init
;;   (advice-add 'eglot-code-action-organize-imports :before #'eglot-format-buffer)
;;   (add-hook 'eglot-managed-mode-hook (lambda () (add-hook 'before-save-hook #'eglot-format-buffer)))
;;   (add-hook 'prog-mode-hook
;; 	    (lambda () (unless (member major-mode '(emacs-lisp-mode))
;; 			 (eglot-ensure)))))

;; 上面的，进入rust 没有提示。。 C++可以
;; 也不行， rust-analyzer filed to load workspace, 因为，这都是单体文件，所以没有 项目结构的。没有 Cargo.toml.. 所以 确实启动不了。。 但是现在 C++也不行了。
;; 现在打开rs文件， `M-x describe-mode` 可以看到 Eglot-managed, Eglot-Inlay-Hints.
;;  但是，没用， 刚改的时候 还可以看到 Company 起效，因为 match ifl 有这些模板。 现在没了。
;;;C++ ..describe-mode 没有 Eglot的东西， 而且 major mode 是 c-ts-mode.el 里的 c++-ts-mode..
;; ok, 之前 命令写错了，少了hook。。。 反正 打开文件后，下面的buffer会显示 已连接到 clang。
;; 还有个问题， Company确实没有生效。 是因为 eglot的原因？
;; 还有就是 不知道 哪个插件：比如 rust 中输入  `for i in` 后，文件中全部内容 粗体，斜体，下划线，变黄。
(require 'eglot)
(add-to-list 'eglot-server-programs '(rust-ts-mode . ("rust-analyzer")))
;(add-to-list 'eglot-server-programs '(c-or-c++-ts-mode . ("clangd")))
;(add-to-list 'eglot-server-programs '(c-ts-mode . ("clangd")))
(add-to-list 'eglot-server-programs '(c++-ts-mode . ("clangd")))

(add-hook 'rust-ts-mode-hook 'eglot-ensure)
(add-hook 'c++-ts-mode-hook 'eglot-ensure)
;(add-hook 'c-ts-mode-hook 'eglot-ensure)
;(add-hook 'c-or-c++-ts-mode-hook 'eglot-ensure)





;; (require 'clang-format)  ;; 没有这个包
;; (defun my-c++-mode-cf()
;;   (setq indent-tabs-mode nil)
;;   (setq c-basic-offset 4)
;;   (clang-format-mode +1))
;; (add-hook 'c++-ts-mode-hook 'my-c++-mode-cf)



;; (require 'treesit)
;; ;(global-treesit-mode)  ;; 这2个方法都没有
;; ;(global-tree-sitter-mode)
;; (add-hook 'rust-ts-mode-hook (lambda () (treesit-parser-create 'rust)))
;; (add-hook 'c++-ts-mode-hook (lambda () (treesit-parser-create 'c++)))

;; (add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
;; (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))


;; 是下面的 treesit导致 rust  `for i in` 会使得全文 粗体，斜体，下划线，黄色.
;; 但是根据AI配置，上面的 global方法根本没有。。
;; 用这个，会导致 Company无法使用。。
;; ;; 这个有点多。。自己仿照着 做了修改，不知道行不行。。
(use-package treesit
  :when (and (fboundp 'treesit-available-p) (treesit-available-p))
  :mode (
     ;; ("\\(?:Dockerfile\\(?:\\..*\\)?\\|\\.[Dd]ockerfile\\)\\'" . dockerfile-ts-mode)
	 ;; ("\\.go\\'" . go-ts-mode)
	 ;; ("/go\\.mod\\'" . go-mod-ts-mode)
;	 ("\\.rs\\'" . rust-ts-mode)
	 ;; ("\\.ts\\'" . typescript-ts-mode)
	 ("\\.y[a]?ml\\'" . yaml-ts-mode)
     ("\\.cpp\\'" . c++-ts-mode)
     ("\\.c\\'" . c-ts-mode)
     ("\\.h\\'" . c-or-c++-ts-mode)
     )
;  :config (setq treesit-font-lock-level 4)
  :init
  (setq major-mode-remap-alist
	'((sh-mode         . bash-ts-mode)
	  (c-mode          . c-ts-mode)
	  (c++-mode        . c++-ts-mode)
	  (c-or-c++-mode   . c-or-c++-ts-mode)
	  ;; (css-mode        . css-ts-mode)
	  ;; (js-mode         . js-ts-mode)
	  ;; (java-mode       . java-ts-mode)
	  ;; (js-json-mode    . json-ts-mode)
	  (makefile-mode   . cmake-ts-mode)
	  (python-mode     . python-ts-mode)
	  ;; (ruby-mode       . ruby-ts-mode)
	  ;; (conf-toml-mode  . toml-ts-mode)
    )
  )
  (setq treesit-language-source-alist
	'((bash       . ("https://github.com/tree-sitter/tree-sitter-bash"))
;	  (c          . ("https://github.com/tree-sitter/tree-sitter-c"))
	  (cpp        . ("https://github.com/tree-sitter/tree-sitter-cpp"))
	  ;; (css        . ("https://github.com/tree-sitter/tree-sitter-css"))
	  (cmake      . ("https://github.com/uyha/tree-sitter-cmake"))
	  ;; (csharp     . ("https://github.com/tree-sitter/tree-sitter-c-sharp.git"))
	  ;; (dockerfile . ("https://github.com/camdencheek/tree-sitter-dockerfile"))
	  (elisp      . ("https://github.com/Wilfred/tree-sitter-elisp"))
	  ;; (go         . ("https://github.com/tree-sitter/tree-sitter-go"))
	  ;; (gomod      . ("https://github.com/camdencheek/tree-sitter-go-mod.git"))
	  ;; (html       . ("https://github.com/tree-sitter/tree-sitter-html"))
	  ;; (java       . ("https://github.com/tree-sitter/tree-sitter-java.git"))
	  ;; (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
	  (json       . ("https://github.com/tree-sitter/tree-sitter-json"))
	  (lua        . ("https://github.com/Azganoth/tree-sitter-lua"))
	  ;; (make       . ("https://github.com/alemuller/tree-sitter-make"))
	  (markdown   . ("https://github.com/MDeiml/tree-sitter-markdown" nil "tree-sitter-markdown/src"))
	  ;; (ocaml      . ("https://github.com/tree-sitter/tree-sitter-ocaml" nil "ocaml/src"))
	  (org        . ("https://github.com/milisims/tree-sitter-org"))
	  (python     . ("https://github.com/tree-sitter/tree-sitter-python"))
	  ;; (php        . ("https://github.com/tree-sitter/tree-sitter-php"))
	  ;; (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "typescript/src"))
	  ;; (tsx        . ("https://github.com/tree-sitter/tree-sitter-typescript" nil "tsx/src"))
	  ;; (ruby       . ("https://github.com/tree-sitter/tree-sitter-ruby"))
	  (rust       . ("https://github.com/tree-sitter/tree-sitter-rust"))
	  (sql        . ("https://github.com/m-novikov/tree-sitter-sql"))
	  ;; (vue        . ("https://github.com/merico-dev/tree-sitter-vue"))
	  (yaml       . ("https://github.com/ikatyang/tree-sitter-yaml"))
	  ;; (toml       . ("https://github.com/tree-sitter/tree-sitter-toml"))
	  ;; (zig        . ("https://github.com/GrayJack/tree-sitter-zig"))
    )
  )
)

;; 安装cpp的 东西。 会： Library installed to ~/.emacs.d/tree-sitter/libtree-sitter-cpp.so
;; 没有下面这行的话， 打开cpp文件，会报错：说 找不到 libtree-sitter-cpp
;; 安装完后  必 须  注释掉，不然 启动emacs 每次都要 clone 仓库。。
;;(treesit-install-language-grammar 'cpp)
;(treesit-install-language-grammar 'c)
;(treesit-install-language-grammar 'rust)
;(treesit-install-language-grammar 'org)
;;;
;;.. 直接　命令执行





; 这个 for while 模板的 右大括号的 位置有问题。 需要 自己修正的。。
;   看了下， 模板没有问题， 应该是 被 emacs 的 某个特性 影响了，导致 } 后移了。  应该是： 在没有完成 一句 语句 ( 就是没有 分号 )的情况下， 回车 会 自动 再次缩进 一个tab，   模板应该收到了这个 特性的影响。 但我不知道是什么，怎么改。
;   还行， 写完后 光标移动到 } 所在行后， tab 一下， 就可以 自动 回到 应该的位置。  即使你自己在前面 加几个 空格， 然后 tab 也可以 自动归位，  光标 在 } 上 或前面， tab 都可以，  在 }之后 ，tab 无效
; 代码模板
;; 但是这里的配置 不知道什么用。。
;;;; g, 不显示了. .. 又显示了,不知道怎么回事..  不过这个能显示了,其他的就少一些东西...
;; ... 是上面 treesit的问题, 如果 treesit 读取 .cpp文件,那么 补全用的是 treesit,所以没有 yasnippet的补全了.
(use-package yasnippet
  :ensure t
  :hook
  (prog-mode . yas-minor-mode)
  :config
  (yas-reload-all)
  ;; add company-yasnippet to company-backends
  (defun company-mode/backend-with-yas (backend)
    (if (and (listp backend) (member 'company-yasnippet backend))
	backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))
  (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  ;; unbind <TAB> completion
  (define-key yas-minor-mode-map [(tab)]        nil)
  (define-key yas-minor-mode-map (kbd "TAB")    nil)
  (define-key yas-minor-mode-map (kbd "<tab>")  nil)
  :bind
  (:map yas-minor-mode-map ("S-<tab>" . yas-expand)))

;; (require 'yasnippet)
;; (yas-global-mode 1)
;; (add-hook 'rust-ts-mode-hook 'yas-minor-mode)
;; (add-hook 'c++-ts-mode-hook 'yas-minor-mode)
;; (add-hook 'rust-mode-hook 'yas-minor-mode)
;; (add-hook 'c++-mode-hook 'yas-minor-mode)

;; (use-package yasnippet
;;   :ensure t
;;   :hook
;;   (prog-mode . yas-minor-mode)
;;   )

;; (defun my-yas-minor-mode-hook ()
;;   "Custom hook for yasnippet."
;;   (yas-minor-mode 1))
;; (add-hook 'tree-sitter-after-on-hook 'my-yas-minor-mode-hook)

;; 大量常用代码片段。
(use-package yasnippet-snippets
   :ensure t
   :after yasnippet)
;;(require 'yasnippet-snippets)


;; (add-hook 'after-init-hook 'global-company-mode) ;; 启用 company
;; (add-hook 'company-mode-hook (lambda () (yas-minor-mode 1))) ;; 在 company 模式下启用 yasnippet





;;; 下面是 package-install ivy 自动添加的

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(move-dup format-all ace-window amx swiper-helm counsel ivy))
 '(tab-width 4))
;(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
; )

;;; 下面是 github 上 的 small config example, 网上也有，所以自己复制进来了。

(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
;; enable this if you want `swiper' to use it
;; (setq search-default-mode #'char-fold-to-regexp)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)       ;;; 修改了 M-x 。。 要安装 counsel  还得注释掉。。
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

;;; 上面的复制后， emacs 的 M-c 不能用了。 有 counsel， 那就 安装下 counsel
;;  但是 不能 M-c 怎么安装 counsel ...
;; 安装 counsel 没有 修改 这个文件。


;; 顺便把 swiper 也装了， 虽然不知道有什么用。
;; 这个。。装的是 swiper-helm ..  和 swiper 有什么区别吗？ 这个应该是 helm 版的， 就是 没有找到 swiper，它帮我装了个 swiper-helm 。。  在 git 上 说到了 swiper-helm，它是  基于helm的
;; swiper-helm 没有 修改 本文件。
;; 搞不懂， 清华的仓库里有 swiper 啊。 0.14.2
;; package-delete 的时候， 显示，我已经有 swiper 和 swiper-helm 了，  估计是装 counsel 的时候 一并装了 ？

; drwxr-xr-x. 1 asdf asdf  142  5月15日 15:24 swiper-helm-20180131.1744
; drwxr-xr-x. 1 asdf asdf 2292  5月15日 15:24 helm-20240513.1346
; drwxr-xr-x. 1 asdf asdf  308  5月15日 15:24 helm-core-20240510.1815
; drwxr-xr-x. 1 asdf asdf  292  5月15日 15:24 async-20240323.1912
; drwxr-xr-x. 1 asdf asdf  110  5月15日 15:24 wfnames-20240418.1005
; drwxr-xr-x. 1 asdf asdf   94  5月15日 15:24 popup-20240101.830
; drwxr-xr-x. 1 asdf asdf  110  5月15日 15:22 counsel-20240502.743
; drwxr-xr-x. 1 asdf asdf  102  5月15日 15:22 swiper-20240405.1642
; drwxr-xr-x. 1 asdf asdf  296  5月15日 15:12 ivy-20240502.808
; drwxr-xr-x. 1 asdf asdf   28  5月15日 14:12 archives
; drwx------. 1 asdf asdf  102  5月15日 14:12 gnupg

;; 确实， 装 counsel 的时候 一起装的 swiper， 但是 为什么 package-install 中 没有 swiper 呢？
; 我现在 输入 swiper 只有2个：  swiper-helm,  org-starter-swiper    不可能后者是 swiper 吧？
;; 而且 这逻辑 是真的坑， 我要 swiper， 结果装了一个 swiper-helm 。。 wtf？
;; ..? 越来越怪了， 刚才 package-delete 还可以看到 swiper-helm， 重启后 没了。。
; 我之前 package-delete 的时候 看到了 swiper-helm 和 swiper， 但是 没有 回车 啊。 rm 算了。

; drwxr-xr-x. 1 asdf asdf 2292  5月15日 15:24 helm-20240513.1346
; drwxr-xr-x. 1 asdf asdf  308  5月15日 15:24 helm-core-20240510.1815
; drwxr-xr-x. 1 asdf asdf  292  5月15日 15:24 async-20240323.1912
; drwxr-xr-x. 1 asdf asdf  110  5月15日 15:24 wfnames-20240418.1005
; drwxr-xr-x. 1 asdf asdf   94  5月15日 15:24 popup-20240101.830
; drwxr-xr-x. 1 asdf asdf  110  5月15日 15:22 counsel-20240502.743
; drwxr-xr-x. 1 asdf asdf  102  5月15日 15:22 swiper-20240405.1642
; drwxr-xr-x. 1 asdf asdf  296  5月15日 15:12 ivy-20240502.808
; drwxr-xr-x. 1 asdf asdf   28  5月15日 14:12 archives
; drwx------. 1 asdf asdf  102  5月15日 14:12 gnupg



;;;;;; package-install 装了 amx
;; 网上有几行配置，但是 我看 github 上没有， 所以也没有写。
;; 我的安装方式 错了。。 直接 package-install  的话，  不会在 本文件 留下 信息， 所以 其他人 用不了， 不知道你装了 什么。。。


;;;;;;; 装了 ace-window


;;;  ⛔ Warning (comp): amx.el:1207:4: Warning: `declare' after `interactive'
;;;  ⛔ Warning (comp): amx.el:1260:9: Warning: Variable ‘commands’ left uninitialized
;;;  ⛔ Warning (comp): avy.el:1725:14: Warning: ‘inhibit-point-motion-hooks’ is an obsolete variable (as of 25.1); use ‘cursor-intangible-mode’ or ‘cursor-sensor-mode’ instead
;;;  ⛔ Warning (comp): ace-window.el:95:2: Warning: custom-declare-variable `aw-minibuffer-flag' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:99:2: Warning: custom-declare-variable `aw-ignored-buffers' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:104:2: Warning: custom-declare-variable `aw-ignore-on' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:117:12: Warning: defcustom for ‘aw-leading-char-style’ has syntactically odd type ‘'(choice (const :tag single char 'char) (const :tag full path 'path))’
;;;  ⛔ Warning (comp): ace-window.el:138:2: Warning: custom-declare-variable `aw-frame-offset' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:143:2: Warning: custom-declare-variable `aw-frame-size' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:149:12: Warning: defcustom for ‘aw-char-position’ has syntactically odd type ‘'(choice (const :tag top left corner only 'top-left) (const :tag both left corners 'left))’
;;;  ⛔ Warning (comp): ace-window.el:157:2: Warning: defvar `aw-dispatch-alist' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:191:2: Warning: custom-declare-variable `aw-make-frame-char' docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:449:2: Warning: docstring wider than 80 characters
;;;  ⛔ Warning (comp): ace-window.el:539:37: Warning: Case 'visible will match ‘quote’.  If that’s intended, write (visible quote) instead.  Otherwise, don’t quote ‘visible’.
;;;  ⛔ Warning (comp): ace-window.el:539:37: Warning: Case 'global will match ‘quote’.  If that’s intended, write (global quote) instead.  Otherwise, don’t quote ‘global’.
;;;  ⛔ Warning (comp): ace-window.el:539:37: Warning: Case 'frame will match ‘quote’.  If that’s intended, write (frame quote) instead.  Otherwise, don’t quote ‘frame’.

;; 不知道这些 警告 要不要紧。。。 现在已经是 靠配置了， 不是 靠 package-install 了



;; ..上面有了，这里还有。。会合并？
(use-package ivy
  :ensure t
  :init
  (ivy-mode 1)
  (counsel-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq search-default-mode #'char-fold-to-regexp)
  (setq ivy-count-format "(%d/%d) ")
  :bind
  (("C-s" . 'swiper)
   ("C-x b" . 'ivy-switch-buffer)
   ("C-c v" . 'ivy-push-view)
   ("C-c s" . 'ivy-switch-view)
   ("C-c V" . 'ivy-pop-view)
   ("C-x C-@" . 'counsel-mark-ring); 在某些终端上 C-x C-SPC 会被映射为 C-x C-@，比如在 macOS 上，所以要手动设置
   ("C-x C-SPC" . 'counsel-mark-ring)
   :map minibuffer-local-map
   ("C-r" . counsel-minibuffer-history)))








; rust 默认(或者受到 setq-default 的影响)  4个空格，不需要改。

;(add-hook 'c++-ts-mode-hook 'my-c++-mode-hook)  ;; treesit 把cpp设置为 -ts-mode了...没用.还是2个.. 但是 c++-mode 可以4个空格..
(add-hook 'c++-mode-hook 'my-c++-mode-hook)   ;; 能用。不然 cpp 一个tab 2个空格 ， 之前 把 tab 改成4个空格长度， rust 就是 一个tab，长度是4个空格， 但是 cpp是 一个tab 用2个空格代替了。 感觉要设置成全局的？
(defun my-c++-mode-hook ()
  (interactive)
  ;; 设置缩进为 4 个空格
  (setq c-basic-offset 4)
  ;; 设置 tab 键的缩进大小
  (setq indent-tabs-mode nil)
)



(defun my-c++-ts-mode-setup ()
  "Custom C++ Tree-sitter mode setup."
  ;; 设置基本缩进为 4 个空格
  (setq-local c-basic-offset 4)
  (setq c-ts-mode-indent-offset 4)
;;  (setq c++-ts-mode-indent-offset 4)
  ;; 如果需要，可以设置 tab 宽度也为 4
;;  (setq tab-width 4)
  ;; 如果你不希望使用 tab 字符，而是始终使用空格进行缩进
  (setq-local indent-tabs-mode nil))
;; 将上述设置应用于 c++-ts-mode
(add-hook 'c++-ts-mode-hook 'my-c++-ts-mode-setup)   ;;也没用







; ;; 设置缩进为 4 个空格        ; 不行
(setq c-basic-offset 4)
; ;; 设置 tab 键的缩进大小
; (setq indent-tabs-mode nil)


(setq-default indent-tabs-mode nil)     ; 可以，不进mode 的话，可以。 进入C++ mode，必须 上面的 add-hook，不然 c++ 还是 一个 tab 2个空格。
(setq-default tab-width 4)
;(setq indent-line-function 'insert-tab)









;; 2025-3-4 修改了 本文件后，启动会报错： Symbol's function definition is void: server-running-p
;; 但是之前也没有 require server 啊。 删了算了. 删了不报错了，但是为什么之前也不报错？
;; 这个真有用， 注释后， 终端 `emacsclient xxx.cpp &` 无法使用了。
;(unless (server-running-p)    ; 服务器模式，用命令行 emacs xx.txt 每次都是打开 新的 emacs。
;  (server-start))           ; 在emacs中 M-x server-start 后， 命令行 emacsclient xx.txt 就可以使用 已打开的emacs了， 直接配置里 执行 server-start
(require 'server)   ;; 不知道之前 哪个配置 会加载这个 server。。所以导致 2025-3-4 修改后 必须手动添加下。
(unless (server-running-p)
  (server-start))


;; Warning: setting attribute ‘:distant-foreground’ of face ‘highlight’: nil value is invalid, use ‘unspecified’ instead.    一直有这个警告，但是我把配置放最后了， 还是有这个警告，不知道哪个插件设置的。\
;; theme 的问题，但是 把theme注释掉， rust 还是 in之后全部变色。
;(set-face-attribute 'highlight nil :background "yellow" :distant-foreground 'unspecified)

(provide 'init)     ; 。。说要有这个。。但是我之前没有 也可以啊。。
;;; init.el ends here
